#include "CrossPLFactory.hpp"

#include <android/log.h>
#include <cstring>
%IncludeProxyHpp%

namespace crosspl {
/***********************************************/
/***** static variables initialize *************/
/***********************************************/


/***********************************************/
/***** static function implement ***************/
/***********************************************/
int CrossPLFactory::OnLoad(JNIEnv* jenv)
{
  __android_log_print(ANDROID_LOG_FATAL, "crosspl", "%s", __PRETTY_FUNCTION__);
  int ret = 0;

%RegisterNativeMethods%

  return (ret == 0? 0 : -1);
}

int64_t CreateCppObject(const char* javaClassName)
{
  __android_log_print(ANDROID_LOG_FATAL, "crosspl", "%s", __PRETTY_FUNCTION__);
  void* ptr = nullptr;

%CreateCppObject%

  if(ptr == nullptr) {
    throw std::runtime_error("CrossPL: Failed to create cpp object.");
  }

  auto cppHandle = reinterpret_cast<int64_t>(ptr);
  return cppHandle;
}

void DestroyCppObject(const char* javaClassName, int64_t cppHandle)
{
  if(cppHandle == 0) {
    return;
  }
  __android_log_print(ANDROID_LOG_FATAL, "crosspl", "%s", __PRETTY_FUNCTION__);

%DestroyCppObject%

  // need return before here.
  throw std::runtime_error("CrossPL: Failed to destroy cpp object.");
}

/***********************************************/
/***** class public function implement  ********/
/***********************************************/

/***********************************************/
/***** class protected function implement  *****/
/***********************************************/


/***********************************************/
/***** class private function implement  *******/
/***********************************************/


} // namespace crosspl

extern "C"
JNIEXPORT jint JNICALL
%JniOnLoad%(JavaVM *jvm, void *jreserved)
{
  __android_log_print(ANDROID_LOG_INFO, "crosspl", "JNI_OnLoad() in CrossPL is running.");

  jint jversion = JNI_VERSION_1_6;
  JNIEnv* jenv;

  int ret = jvm->GetEnv((void **) &jenv, jversion);
  if(ret != JNI_OK) {
    __android_log_print(ANDROID_LOG_ERROR, "crosspl", "JNI_OnLoad(): Failed to get jni env.");
    return ret;
  }

  ret = crosspl::CrossPLFactory::OnLoad(jenv);
  if(ret != 0) {
    __android_log_print(ANDROID_LOG_ERROR, "crosspl", "JNI_OnLoad(): Failed to .");
    return JNI_ERR;
  }

  __android_log_print(ANDROID_LOG_INFO, "crosspl", "JNI_OnLoad() register CrossPL native methods.");

  return jversion;
}
